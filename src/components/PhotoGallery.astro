---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import demoImage from '../images/logo.png';

// Interface para las fotos
interface GalleryPhoto {
    src: ImageMetadata;
    alt: string;
    title?: string;
}

// Array de fotos de ejemplo
const photos: GalleryPhoto[] = [
    {
        src: demoImage,
        alt: "Oeisis en vivo",
        title: "Show en vivo"
    },
    {
        src: demoImage,
        alt: "Oeisis backstage",
        title: "Backstage"
    },
    {
        src: demoImage,
        alt: "Oeisis con fans",
        title: "Meet & Greet"
    }
];

// Opciones del carrusel
const autoplay = true; // Activado
const autoplayInterval = 3000; // 3 segundos entre slides
---

<section class="w-full py-12 bg-gray-900 text-white">
    <div class="max-w-7xl mx-auto px-4">
        <h2 class="text-2xl md:text-4xl font-bold text-center mb-8">Galería</h2>
        
        {photos.length === 0 ? (
            <p class="text-center text-gray-400 py-12">No hay fotos disponibles</p>
        ) : (
            <div class="relative">
                <!-- Slides container -->
                <div id="photo-carousel" class="overflow-hidden rounded-lg">
                    <div class="carousel-track flex transition-transform duration-500 ease-out" style="transform: translateX(0%)">
                        {photos.map((photo) => (
                            <figure class="w-full flex-shrink-0" style="width:100%">
                                <Image
                                    src={photo.src}
                                    alt={photo.alt}
                                    widths={[320, 640, 960]}
                                    sizes="(max-width: 640px) 100vw, 90vw"
                                    loading="lazy"
                                    class="w-full h-72 md:h-[420px] object-cover"
                                />
                                {photo.title && (
                                    <figcaption class="absolute bottom-0 left-0 right-0 bg-black/75 text-white p-4">
                                        <h3 class="text-lg font-semibold">{photo.title}</h3>
                                    </figcaption>
                                )}
                            </figure>
                        ))}
                    </div>
                </div>

                <!-- Navigation Buttons -->
                <button 
                    class="absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/75 text-white w-10 h-10 rounded-full flex items-center justify-center text-2xl transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    aria-label="Anterior"
                    data-carousel-prev
                >
                    ‹
                </button>
                <button 
                    class="absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/75 text-white w-10 h-10 rounded-full flex items-center justify-center text-2xl transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    aria-label="Siguiente"
                    data-carousel-next
                >
                    ›
                </button>

                <!-- Dots -->
                <div class="mt-4 flex justify-center gap-2" role="tablist" aria-label="Navegación del carrusel">
                    {photos.map((_, i) => (
                        <button
                            class="w-2.5 h-2.5 rounded-full bg-gray-400/60 focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-colors"
                            aria-label={`Ir a la imagen ${i + 1}`}
                            data-carousel-dot={i}
                            aria-selected={i === 0 ? 'true' : 'false'}
                        />
                    ))}
                </div>
            </div>
        )}
    </div>
</section>

<script>
    (function () {
        const track = document.querySelector('.carousel-track') as HTMLElement;
        if (!track) return;

        const trackParent = track.parentElement;
        if (!trackParent) return;

        const slides = Array.from(track.children) as HTMLElement[];
        if (slides.length === 0) return;

        let index = 0;
        const total = slides.length;
        const prevBtn = document.querySelector('[data-carousel-prev]');
        const nextBtn = document.querySelector('[data-carousel-next]');
        const dots = Array.from(document.querySelectorAll('[data-carousel-dot]'));
        let autoplayTimer: number | null = null;
        let startX: number | null = null;

        function update(): void {
            const percent = -index * 100;
            track.style.transform = `translateX(${percent}%)`;
            dots.forEach((d, i) => {
                d.classList.toggle('bg-yellow-400', i === index);
                d.setAttribute('aria-selected', i === index ? 'true' : 'false');
            });
        }

        function showNext(): void {
            index = (index + 1) % total;
            update();
        }

        function showPrev(): void {
            index = (index - 1 + total) % total;
            update();
        }

        function goTo(n: number): void {
            index = ((n % total) + total) % total;
            update();
        }

        if (nextBtn) nextBtn.addEventListener('click', () => { showNext(); resetAutoplay(); });
        if (prevBtn) prevBtn.addEventListener('click', () => { showPrev(); resetAutoplay(); });

        dots.forEach((d) => {
            d.addEventListener('click', () => {
                const idx = Number(d.getAttribute('data-carousel-dot'));
                if (!isNaN(idx)) {
                    goTo(idx);
                    resetAutoplay();
                }
            });
        });

        // Keyboard navigation
        window.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight') { showNext(); resetAutoplay(); }
            if (e.key === 'ArrowLeft') { showPrev(); resetAutoplay(); }
        });

        // Touch / swipe support
        trackParent.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
        }, { passive: true });

        trackParent.addEventListener('touchend', (e) => {
            if (startX === null) return;
            const endX = e.changedTouches[0].clientX;
            const diff = startX - endX;
            if (Math.abs(diff) > 40) {
                if (diff > 0) showNext(); else showPrev();
                resetAutoplay();
            }
            startX = null;
        });

        // Autoplay settings
        const config = {
            autoplay: true,
            interval: 3000
        };

        function startAutoplay(): void {
            if (!config.autoplay) return;
            stopAutoplay();
            autoplayTimer = window.setInterval(() => showNext(), config.interval);
        }

        function stopAutoplay(): void {
            if (autoplayTimer !== null) {
                window.clearInterval(autoplayTimer);
                autoplayTimer = null;
            }
        }

        function resetAutoplay(): void {
            stopAutoplay();
            startAutoplay();
        }

        // Resize: ensure slides occupy full width
        function refreshSlideWidths(): void {
            if (!trackParent) return;
            const w = trackParent.clientWidth;
            slides.forEach((s) => { s.style.width = `${w}px`; });
            update();
        }

        window.addEventListener('resize', refreshSlideWidths);
        trackParent.addEventListener('mouseenter', stopAutoplay);
        trackParent.addEventListener('mouseleave', startAutoplay);

        // Initialize
        refreshSlideWidths();
        startAutoplay();
    })();
</script>
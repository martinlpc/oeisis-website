---
import Layout from '../layouts/Layout.astro';
---

<Layout title="OEISIS - Admin Panel">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8 text-center">Panel de Administración</h1>

        <div id="loginSection" class="max-w-md mx-auto bg-gray-800 p-6 rounded-lg">
            <h2 class="text-xl mb-4">Iniciar Sesión</h2>
            <div class="space-y-4">
                <div>
                    <label for="email" class="block mb-1">Email</label>
                    <input type="email" id="email" class="w-full p-2 rounded bg-gray-700 text-white" />
                </div>
                <div>
                    <label for="password" class="block mb-1">Contraseña</label>
                    <input type="password" id="password" class="w-full p-2 rounded bg-gray-700 text-white" />
                </div>
                <button id="loginButton" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded"> Iniciar Sesión </button>
            </div>
        </div>

        <div id="adminPanel" class="hidden max-w-4xl mx-auto mt-8">
            <div class="flex justify-between mb-6">
                <h2 class="text-2xl font-bold">Gestionar Shows</h2>
                <button id="addShowButton" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"> Agregar Show </button>
            </div>

            <div id="showForm" class="hidden bg-gray-800 p-6 rounded-lg mb-8">
                <h3 class="text-xl mb-4" id="formTitle">Agregar Nuevo Show</h3>
                <input type="hidden" id="showId" />
                <div class="space-y-4">
                    <div>
                        <label for="venue" class="block mb-1">Lugar</label>
                        <input type="text" id="venue" class="w-full p-2 rounded bg-gray-700 text-white" />
                    </div>
                    <div>
                        <label for="date" class="block mb-1">Fecha</label>
                        <input type="date" id="date" class="w-full p-2 rounded bg-gray-700 text-white" />
                    </div>
                    <div>
                        <label for="displayDate" class="block mb-1">Texto Fecha a mostrar</label>
                        <input type="text" id="displayDate" class="w-full p-2 rounded bg-gray-700 text-white" />
                    </div>
                    <div>
                        <label for="location" class="block mb-1">Ubicación</label>
                        <input type="text" id="location" class="w-full p-2 rounded bg-gray-700 text-white" />
                    </div>
                    <div>
                        <label for="ticketLink" class="block mb-1">Link de Tickets (opcional)</label>
                        <input type="url" id="ticketLink" class="w-full p-2 rounded bg-gray-700 text-white" />
                    </div>
                    <div>
                        <label for="info" class="block mb-1">Información Adicional (opcional)</label>
                        <textarea id="info" class="w-full p-2 rounded bg-gray-700 text-white" rows="3"></textarea>
                    </div>
                    <div class="flex space-x-4">
                        <button id="saveShowButton" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"> Guardar </button>
                        <button id="cancelButton" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"> Cancelar </button>
                    </div>
                </div>
            </div>

            <div class="bg-gray-800 rounded-lg p-6">
                <h3 class="text-xl mb-4">Shows Actuales</h3>
                <div id="showsList" class="divide-y divide-gray-700">
                    <!-- Los shows se cargarán dinámicamente -->
                    <p class="py-3 text-center text-gray-400">Cargando shows...</p>
                </div>
            </div>

            <div class="mt-8 text-center">
                <button id="logoutButton" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"> Cerrar Sesión </button>
            </div>
        </div>
    </div>

    <script>
        // Importamos Firebase desde CDN para que funcione en el cliente
        import { initializeApp } from 'firebase/app';
        import { getFirestore, collection, getDocs, doc, addDoc, updateDoc, deleteDoc, serverTimestamp, getDoc } from 'firebase/firestore';
        import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';

        // Configuración de Firebase - Asegúrate de usar variables de entorno en producción
        const firebaseConfig = {
            apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
            authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
            projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
            storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
            messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
            appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Referencias a elementos DOM con verificación de nulos
        const loginSection = document.getElementById('loginSection') as HTMLDivElement;
        const adminPanel = document.getElementById('adminPanel') as HTMLDivElement;
        const loginButton = document.getElementById('loginButton') as HTMLButtonElement;
        const logoutButton = document.getElementById('logoutButton') as HTMLButtonElement;
        const addShowButton = document.getElementById('addShowButton') as HTMLButtonElement;
        const showForm = document.getElementById('showForm') as HTMLDivElement;
        const saveShowButton = document.getElementById('saveShowButton') as HTMLButtonElement;
        const cancelButton = document.getElementById('cancelButton') as HTMLButtonElement;
        const showsList = document.getElementById('showsList') as HTMLDivElement;

        // Verificar que los elementos existan
        if (!loginSection || !adminPanel || !loginButton || !logoutButton || !addShowButton || !showForm || !saveShowButton || !cancelButton || !showsList) {
            console.error('No se encontraron todos los elementos necesarios en el DOM');
        } else {
            // Estado de la autenticación
            onAuthStateChanged(auth, (user) => {
                if (user) {
                    loginSection.classList.add('hidden');
                    adminPanel.classList.remove('hidden');
                    loadShows();
                } else {
                    loginSection.classList.remove('hidden');
                    adminPanel.classList.add('hidden');
                }
            });

            // Login
            loginButton.addEventListener('click', async () => {
                const emailInput = document.getElementById('email') as HTMLInputElement;
                const passwordInput = document.getElementById('password') as HTMLInputElement;

                if (!emailInput || !passwordInput) {
                    alert('No se encontraron los campos de email y contraseña');
                    return;
                }

                const email = emailInput.value;
                const password = passwordInput.value;

                try {
                    await signInWithEmailAndPassword(auth, email, password);
                } catch (error) {
                    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
                    alert(`Error de inicio de sesión: ${errorMessage}`);
                }
            });

            // Logout
            logoutButton.addEventListener('click', async () => {
                await signOut(auth);
            });

            // Cargar shows
            async function loadShows() {
                try {
                    const showsCollection = collection(db, 'shows');
                    const snapshot = await getDocs(showsCollection);

                    if (snapshot.empty) {
                        showsList.innerHTML = '<p class="py-3 text-center text-gray-400">No hay shows registrados.</p>';
                        return;
                    }

                    // Ordenar shows por fecha (los más recientes primero)
                    const shows = snapshot.docs
                        .map((doc) => {
                            const data = doc.data();
                            return {
                                id: doc.id,
                                venue: data.venue || '',
                                date: data.date || '',
                                location: data.location || '',
                                ticketLink: data.ticketLink || '',
                                info: data.info || '',
                            };
                        })
                        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

                    showsList.innerHTML = shows
                        .map(
                            (show) => `
            <div class="py-4 flex justify-between items-center">
              <div>
                <p class="font-bold">${show.venue}</p>
                <p class="text-sm text-gray-400">${new Date(show.date).toLocaleDateString('es-AR')}, ${show.location}</p>
              </div>
              <div>
                <button class="edit-show-btn bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1 rounded mr-2" data-id="${show.id}">
                  Editar
                </button>
                <button class="delete-show-btn bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded" data-id="${show.id}">
                  Eliminar
                </button>
              </div>
            </div>
          `
                        )
                        .join('');

                    // Agregar event listeners a los botones de editar y eliminar
                    document.querySelectorAll('.edit-show-btn').forEach((button) => {
                        button.addEventListener('click', () => {
                            const id = (button as HTMLElement).dataset.id || '';
                            if (id) editShow(id);
                        });
                    });

                    document.querySelectorAll('.delete-show-btn').forEach((button) => {
                        button.addEventListener('click', () => {
                            const id = (button as HTMLElement).dataset.id || '';
                            if (id) deleteShow(id);
                        });
                    });
                } catch (error) {
                    console.error('Error cargando shows:', error);
                    showsList.innerHTML = '<p class="py-3 text-center text-red-500">Error al cargar los shows.</p>';
                }
            }

            // Mostrar formulario para agregar show
            addShowButton.addEventListener('click', () => {
                const formTitle = document.getElementById('formTitle');
                const showIdInput = document.getElementById('showId') as HTMLInputElement;
                const venueInput = document.getElementById('venue') as HTMLInputElement;
                const dateInput = document.getElementById('date') as HTMLInputElement;
                const displayDateInput = document.getElementById('displayDate') as HTMLInputElement;
                const locationInput = document.getElementById('location') as HTMLInputElement;
                const ticketLinkInput = document.getElementById('ticketLink') as HTMLInputElement;
                const infoInput = document.getElementById('info') as HTMLTextAreaElement;

                if (formTitle) formTitle.textContent = 'Agregar Nuevo Show';
                if (showIdInput) showIdInput.value = '';
                if (venueInput) venueInput.value = '';
                if (dateInput) dateInput.value = '';
                if (displayDateInput) displayDateInput.value = '';
                if (locationInput) locationInput.value = '';
                if (ticketLinkInput) ticketLinkInput.value = '';
                if (infoInput) infoInput.value = '';

                showForm.classList.remove('hidden');
            });

            // Cancelar formulario
            cancelButton.addEventListener('click', () => {
                showForm.classList.add('hidden');
            });

            // Guardar show (crear o actualizar)
            saveShowButton.addEventListener('click', async () => {
                const showIdInput = document.getElementById('showId') as HTMLInputElement;
                const venueInput = document.getElementById('venue') as HTMLInputElement;
                const dateInput = document.getElementById('date') as HTMLInputElement;
                const displayDateInput = document.getElementById('displayDate') as HTMLInputElement;
                const locationInput = document.getElementById('location') as HTMLInputElement;
                const ticketLinkInput = document.getElementById('ticketLink') as HTMLInputElement;
                const infoInput = document.getElementById('info') as HTMLTextAreaElement;

                if (!showIdInput || !venueInput || !dateInput || !displayDateInput || !locationInput || !ticketLinkInput || !infoInput) {
                    alert('No se encontraron todos los campos del formulario');
                    return;
                }

                const showId = showIdInput.value;
                const data = {
                    venue: venueInput.value,
                    date: dateInput.value,
                    displayDate: displayDateInput.value,
                    location: locationInput.value,
                    ticketLink: ticketLinkInput.value || null,
                    info: infoInput.value || null,
                    updatedAt: serverTimestamp(),
                };

                try {
                    if (showId) {
                        // Actualizar
                        await updateDoc(doc(db, 'shows', showId), data);
                    } else {
                        // Crear nuevo
                        await addDoc(collection(db, 'shows'), {
                            ...data,
                            createdAt: serverTimestamp(),
                        });
                    }

                    showForm.classList.add('hidden');
                    loadShows();

                    // Rebuild del sitio por ser estático
                    triggerRebuild();
                } catch (error) {
                    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
                    alert(`Error guardando el show: ${errorMessage}`);
                }
            });

            // Editar show
            async function editShow(id: string) {
                try {
                    const showDoc = doc(db, 'shows', id);
                    const showSnapshot = await getDoc(showDoc);

                    if (!showSnapshot.exists()) {
                        alert('No se encontró el show');
                        return;
                    }

                    const showData = showSnapshot.data();

                    const formTitle = document.getElementById('formTitle');
                    const showIdInput = document.getElementById('showId') as HTMLInputElement;
                    const venueInput = document.getElementById('venue') as HTMLInputElement;
                    const dateInput = document.getElementById('date') as HTMLInputElement;
                    const displayDateInput = document.getElementById('displayDate') as HTMLInputElement;
                    const locationInput = document.getElementById('location') as HTMLInputElement;
                    const ticketLinkInput = document.getElementById('ticketLink') as HTMLInputElement;
                    const infoInput = document.getElementById('info') as HTMLTextAreaElement;

                    if (formTitle) formTitle.textContent = 'Editar Show';
                    if (showIdInput) showIdInput.value = id;
                    if (venueInput) venueInput.value = showData.venue || '';

                    // Formatear la fecha para el input date (YYYY-MM-DD)
                    if (dateInput) {
                        const date = showData.date ? new Date(showData.date) : new Date();
                        dateInput.value = date.toISOString().split('T')[0];
                    }

                    if (locationInput) locationInput.value = showData.location || '';
                    if (ticketLinkInput) ticketLinkInput.value = showData.ticketLink || '';
                    if (infoInput) infoInput.value = showData.info || '';

                    showForm.classList.remove('hidden');
                } catch (error) {
                    console.error('Error cargando show para editar:', error);
                    alert('Error cargando los datos del show.');
                }
            }

            // Eliminar show
            async function deleteShow(id: string) {
                if (confirm('¿Estás seguro de que quieres eliminar este show?')) {
                    try {
                        await deleteDoc(doc(db, 'shows', id));
                        loadShows();
                        // Rebuild por ser sitio estatico
                        triggerRebuild();
                    } catch (error) {
                        const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
                        alert(`Error eliminando el show: ${errorMessage}`);
                    }
                }
            }

            // Función para disparar una reconstrucción del sitio
            async function triggerRebuild() {
                try {
                    // Ejemplo para Netlify
                    const webhookUrl = import.meta.env.PUBLIC_REBUILD_WEBHOOK_URL;
                    if (webhookUrl) {
                        await fetch(webhookUrl, { method: 'POST' });
                        console.log('Reconstrucción del sitio iniciada.');
                    }
                } catch (error) {
                    console.error('Error al disparar la reconstrucción:', error);
                }
            }
        }
    </script>
</Layout>
